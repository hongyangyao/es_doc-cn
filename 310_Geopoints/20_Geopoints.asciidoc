[[geopoints]]
== 地理坐标点

_地理坐标点_ 是指地球表面可以用经纬度描述的一个点。((("geo-points"))) 地理坐标点可以用来计算两个坐标间的距离，还可以判断一个坐标是否在一个区域中，或在聚合中。

地理坐标点不能被动态映射((("dynamic mapping", "geo-points and")))（<<dynamic-mapping,dynamic mapping>>）自动检测，而是需要显式声明对应字段类型为 `geo-point` ((("mapping (types)", "geo-points")))：

[source,json]
-----------------------
PUT /attractions
{
  "mappings": {
    "restaurant": {
      "properties": {
        "name": {
          "type": "string"
        },
        "location": {
          "type": "geo_point"
        }
      }
    }
  }
}
-----------------------

[[lat-lon-formats]]
[float="true"]
=== 经纬度坐标格式

如上例，`location` 字段被声明为 `geo_point` 后，我们就可以索引包含了经纬度信息的文档了。((("geo-points", "location fields defined as, lat/lon formats")))((("location field, defined as geo-point")))((("latitude/longitude pairs", "lat/lon formats for geo-points")))((("arrays", "geo-point, lon/lat format")))((("strings", "geo-point, lat/lon format")))((("objects", "geo-point, lat/lon format")))经纬度信息的形式可以是字符串、数组或者对象：

[role="pagebreak-before"]
[source,json]
-----------------------
PUT /attractions/restaurant/1
{
  "name":     "Chipotle Mexican Grill",
  "location": "40.715, -74.011" <1>
}

PUT /attractions/restaurant/2
{
  "name":     "Pala Pizza",
  "location": { <2>
    "lat":     40.722,
    "lon":    -73.989
  }
}

PUT /attractions/restaurant/3
{
  "name":     "Mini Munchies Pizza",
  "location": [ -73.983, 40.719 ] <3>
}
-----------------------
<1> 字符串形式以半角逗号分割，如 `"lat,lon"` 。
<2> 对象形式显式命名为 `lat` 和 `lon` 。
<3> 数组形式表示为 `[lon,lat]` 。

[CAUTION]
========================

可能所有人都至少一次踩过这个坑：地理坐标点用字符串形式表示时是纬度在前，经度在后（ `"latitude,longitude"` ），而数组形式表示时是经度在前，纬度在后（ `[longitude,latitude]` ）&#x2014;顺序刚好相反。

其实，在 Elasticesearch 内部，不管字符串形式还是数组形式，都是经度在前，纬度在后。不过早期为了适配 GeoJSON 的格式规范，调整了数组形式的表示方式。

因此，在使用地理位置的路上就出现了这么一个“捕熊器”，专坑那些不了解这个陷阱的使用者。

========================

