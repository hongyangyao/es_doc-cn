[[_add-an-index]]
=== 添加索引

我们往 Elasticsearch 添加数据时需要用到 _索引_ —— 保存相关数据的地方。
((("indices")))((("clusters", "adding an index")))索引实际上是指向一个或者多个物理 _分片_ 的 _逻辑命名空间_ 。

一个 _分片_ 是一个底层的 _工作单元_ ，它仅保存了((("shards", "defined")))全部数据中的一部分。
在<<inside-a-shard, `分片内部机制`>>中，我们将详细介绍分片是如何工作的，而现在我们只需知道一个分片是一个 Lucene 的实例，以及它本身就是一个完整的搜索引擎。
我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。

Elasticsearch 是利用分片将数据分发到集群内各处的。分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。
当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。

一个分片可以是 _主_ 分片或者 _副本_ 分片。((("primary shards")))((("replica shards")))((("shards", "primary")))
索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。

[NOTE]
====
技术上来说，一个主分片最大能够存储 Integer.MAX_VALUE - 128 个文档，但是实际最大值还需要参考你的使用场景：包括你使用的硬件，
文档的大小和复杂程度，索引和查询文档的方式以及你期望的响应时长。
====

一个副本分片只是一个主分片的拷贝。((("shards", "replica")))副本分片作为硬件故障时保护数据不丢失的冗余备份，并为搜索和返回文档等读操作提供服务。

在索引建立的时候就已经确定了主分片数，但是副本分片数可以随时修改。

让我们在包含一个空节点的集群内创建名为 `blogs` 的索引。((("indices", "creating")))
索引在默认情况下会被分配5个主分片，((("primary shards", "assigned to indices")))((("replica shards", "assigned to indices")))
但是为了演示目的，我们将分配3个主分片和一份副本（每个主分片拥有一个副本分片）：

[source,js]
--------------------------------------------------
PUT /blogs
{
   "settings" : {
      "number_of_shards" : 3,
      "number_of_replicas" : 1
   }
}
--------------------------------------------------
// SENSE: 020_Distributed_Cluster/15_Add_index.json

我们的集群现在是<<cluster-one-node>>。所有3个主分片都被分配在 `Node 1` 。

[[cluster-one-node]]
.拥有一个索引的单节点集群
image::images/elas_0202.png["拥有一个索引的单节点集群"]

如果我们现在查看<<cluster-health, `集群健康`>>，((("cluster health", "checking after adding an index")))我们将看到如下内容：

[source,js]
--------------------------------------------------
{
  "cluster_name": "elasticsearch",
  "status": "yellow", <1>
  "timed_out": false,
  "number_of_nodes": 1,
  "number_of_data_nodes": 1,
  "active_primary_shards": 3,
  "active_shards": 3,
  "relocating_shards": 0,
  "initializing_shards": 0,
  "unassigned_shards": 3, <2>
  "delayed_unassigned_shards": 0,
  "number_of_pending_tasks": 0,
  "number_of_in_flight_fetch": 0,
  "task_max_waiting_in_queue_millis": 0,
  "active_shards_percent_as_number": 50
}
--------------------------------------------------

<1> 集群 `status` 值为 `yellow` 。
<2> 没有被分配到任何节点的副本数。

集群的健康状况为 `yellow` 则表示全部 _主_ 分片都正常运行（集群可以正常服务所有请求），但是 _副本_ 分片没有全部处在正常状态。
实际上，所有3个副本分片都是 `unassigned` —— 它们都没有被分配到任何节点。
在同一个节点上既保存原始数据又保存副本是没有意义的，因为一旦失去了那个节点，我们也将丢失该节点上的所有副本数据。


当前我们的集群是正常运行的，但是在硬件故障时有丢失数据的风险。
