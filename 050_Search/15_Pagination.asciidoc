[[pagination]]
=== 分页

在之前的 <<empty-search,空搜索>> 中说明了集群中有((("pagination"))) 14 个文档匹配了（empty）query 。
但是在 `hits` 数组中只有 10 个文档。如何才能看到其他的文档？

和 SQL 使用 `LIMIT` 关键字返回单个 `page` 结果的方法相同，Elasticsearch 接受((("from parameter")))((("size parameter"))) `from` 和 `size` 参数：

`size`::
   显示应该返回的结果数量，默认是 `10`

`from`::
   显示应该跳过的初始结果数量，默认是 `0`

如果每页展示 5 条结果，可以用下面方式请求得到 1 到 3 页的结果：

[source,js]
--------------------------------------------------
GET /_search?size=5
GET /_search?size=5&from=5
GET /_search?size=5&from=10
--------------------------------------------------
// SENSE: 050_Search/15_Pagination.json


考虑到分页过深以及一次请求太多结果的情况，结果集在返回之前先进行排序。
但请记住一个请求经常跨越多个分片，每个分片都产生自己的排序结果，这些结果需要进行集中排序以保证整体顺序是正确的。

.在分布式系统中深度分页
****

理解为什么((("deep paging, problems with")))深度分页是有问题的，我们可以假设在一个有 5 个主分片的索引中搜索。
当我们请求结果的第一页（结果从 1 到 10 ），每一个分片产生前 10 的结果，并且返回给 _协调节点_ ，协调节点对 50 个结果排序得到全部结果的前 10 个。


现在假设我们请求第 1000 页--结果从 10001 到 10010 。所有都以相同的方式工作除了每个分片不得不产生前10010个结果以外。
然后协调节点对全部 50050 个结果排序最后丢弃掉这些结果中的 50040 个结果。


可以看到，在分布式系统中，对结果排序的成本随分页的深度成指数上升。这就是 web 搜索引擎对任何查询都不要返回超过 1000 个结果的原因。

****

TIP: 在 <<reindex>> 中解释了如何 _能够_ 有效获取大量的文档。
