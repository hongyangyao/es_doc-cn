[[multi-match-query]]
=== multi_match 查询

`multi_match` 查询为能在多个字段上反复执行相同查询提供了一种便捷方式。((("multifield search", "multi_match query")))((("multi_match queries")))((("match query", "multi_match queries")))

[NOTE]
====
`multi_match` 多匹配查询的类型有多种，其中的三种恰巧与 <<know-your-data,了解我们的数据>> 中介绍的三个场景对应，即： `best_fields` 、 `most_fields` 和 `cross_fields` （最佳字段、多数字段、跨字段）。
====

默认情况下，查询的类型是 `best_fields` ，((("best fields queries", "multi-match queries")))((("dis_max (disjunction max) query", "multi_match query wrapped in")))这表示它会为每个字段生成一个 `match` 查询，然后将它们组合到 `dis_max` 查询的内部，如下：

[source,js]
--------------------------------------------------
{
  "dis_max": {
    "queries":  [
      {
        "match": {
          "title": {
            "query": "Quick brown fox",
            "minimum_should_match": "30%"
          }
        }
      },
      {
        "match": {
          "body": {
            "query": "Quick brown fox",
            "minimum_should_match": "30%"
          }
        }
      },
    ],
    "tie_breaker": 0.3
  }
}
--------------------------------------------------

上面这个查询用 `multi_match` 重写成更简洁的形式：

[source,js]
--------------------------------------------------
{
    "multi_match": {
        "query":                "Quick brown fox",
        "type":                 "best_fields", <1>
        "fields":               [ "title", "body" ],
        "tie_breaker":          0.3,
        "minimum_should_match": "30%" <2>
    }
}
--------------------------------------------------
// SENSE: 110_Multi_Field_Search/25_Best_fields.json

<1> `best_fields` 类型是默认值，可以不指定。
<2> 如 `minimum_should_match` 或 `operator` 这样的参数会被传递到生成的 `match` 查询中。

==== 查询字段名称的模糊匹配

字段名称可以用模糊匹配的方式给出：任何与模糊模式正则匹配的字段都会被包括在搜索条件中，((("multi_match queries", "wildcards in field names")))((("wildcards in field names")))((("fields", "wildcards in field names")))例如可以使用以下方式同时匹配 `book_title` 、 `chapter_title` 和 `section_title` （书名、章名、节名）这三个字段：

[source,js]
--------------------------------------------------
{
    "multi_match": {
        "query":  "Quick brown fox",
        "fields": "*_title"
    }
}
--------------------------------------------------

==== 提升单个字段的权重

可以使用 `^` 字符语法为单个字段提升权重，在字段名称的末尾添加 `^boost` ，((("multi_match queries", "boosting individual fields")))((("boost parameter", "boosting individual fields in multi_match queries")))其中 `boost` 是一个浮点数：

[source,js]
--------------------------------------------------
{
    "multi_match": {
        "query":  "Quick brown fox",
        "fields": [ "*_title", "chapter_title^2" ] <1>
    }
}
--------------------------------------------------

<1> `chapter_title` 这个字段的 `boost` 值为 `2` ，而其他两个字段 `book_title` 和 `section_title` 字段的默认 boost 值为 `1` 。
