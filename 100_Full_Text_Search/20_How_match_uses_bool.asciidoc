[[_how_match_uses_bool]]
=== 如何使用布尔匹配

目前为止，可能已经意识到<<match-multi-word,多词 `match` 查询>>只是简单地将生成的 `term` 查询包裹((("match query", "use of bool query in multi-word searches")))((("bool query", "use by match query in multi-word searches")))((("full text search", "how match query uses bool query")))在一个 `bool` 查询中。如果使用默认的 `or` 操作符，每个 `term` 查询都被当作 `should` 语句，这样就要求必须至少匹配一条语句。以下两个查询是等价的：

[source,js]
--------------------------------------------------
{
    "match": { "title": "brown fox"}
}
--------------------------------------------------

[source,js]
--------------------------------------------------
{
  "bool": {
    "should": [
      { "term": { "title": "brown" }},
      { "term": { "title": "fox"   }}
    ]
  }
}
--------------------------------------------------

如果使用 `and` 操作符，所有的 `term` 查询都被当作 `must` 语句，所以 _所有（all）_ 语句都必须匹配。以下两个查询是等价的：

[source,js]
--------------------------------------------------
{
    "match": {
        "title": {
            "query":    "brown fox",
            "operator": "and"
        }
    }
}
--------------------------------------------------

[source,js]
--------------------------------------------------
{
  "bool": {
    "must": [
      { "term": { "title": "brown" }},
      { "term": { "title": "fox"   }}
    ]
  }
}
--------------------------------------------------

如果指定参数 `minimum_should_match` ((("minimum_should_match parameter", "match query using bool query")))，它可以通过 `bool` 查询直接传递，使以下两个查询等价：

[source,js]
--------------------------------------------------
{
    "match": {
        "title": {
            "query":                "quick brown fox",
            "minimum_should_match": "75%"
        }
    }
}
--------------------------------------------------

[source,js]
--------------------------------------------------
{
  "bool": {
    "should": [
      { "term": { "title": "brown" }},
      { "term": { "title": "fox"   }},
      { "term": { "title": "quick" }}
    ],
    "minimum_should_match": 2 <1>
  }
}
--------------------------------------------------
<1> 因为只有三条语句，`match` 查询的参数 `minimum_should_match` 值 75% 会被截断成 `2` 。即三条 `should` 语句中至少有两条必须匹配。


当然，我们通常将这些查询用 `match` 查询来表示，但是如果了解 `match` 内部的工作原理，我们就能根据自己的需要来控制查询过程。有些时候单个 `match` 查询无法满足需求，比如为某些查询条件分配更高的权重。我们会在下一小节中看到这个例子。
