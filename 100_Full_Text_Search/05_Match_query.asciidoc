[[match-query]]
=== 匹配查询

匹配查询 `match` 是个 _核心_ 查询。无论需要查询什么字段， `match` 查询都应该会是首选的查询方式。((("match query")))((("full text search", "match query")))它是一个高级 _全文查询_ ，这表示它既能处理全文字段，又能处理精确字段。

这就是说， `match` 查询主要的应用场景就是进行全文搜索，我们以下面一个简单例子来说明全文搜索是如何工作的：

[[match-test-data]]
==== 索引一些数据

首先，我们使用 <<bulk,`bulk` API>> 创建一些新的文档和索引：((("full text search", "match query", "indexing data")))


[source,js]
--------------------------------------------------
DELETE /my_index <1>

PUT /my_index
{ "settings": { "number_of_shards": 1 }} <2>

POST /my_index/my_type/_bulk
{ "index": { "_id": 1 }}
{ "title": "The quick brown fox" }
{ "index": { "_id": 2 }}
{ "title": "The quick brown fox jumps over the lazy dog" }
{ "index": { "_id": 3 }}
{ "title": "The quick brown fox jumps over the quick dog" }
{ "index": { "_id": 4 }}
{ "title": "Brown fox brown dog" }
--------------------------------------------------
// SENSE: 100_Full_Text_Search/05_Match_query.json

<1> 删除已有的索引。
<2> 稍后，我们会在 <<relevance-is-broken, 被破坏的相关性！>> 中解释只为这个索引分配一个主分片的原因。

==== 单个词查询

我们用第一个示例来解释使用 `match` 查询搜索全文字段中的单个词：((("full text search", "match query", "single word query")))((("match query", "single word query")))

[source,js]
--------------------------------------------------
GET /my_index/my_type/_search
{
    "query": {
        "match": {
            "title": "QUICK!"
        }
    }
}
--------------------------------------------------
// SENSE: 100_Full_Text_Search/05_Match_query.json

Elasticsearch 执行上面这个 `match` 查询的步骤是：((("analysis", "in single term match query")))


1. _检查字段类型_ 。
+
标题 `title` 字段是一个 `string` 类型（ `analyzed` ）已分析的全文字段，这意味着查询字符串本身也应该被分析。

2. _分析查询字符串_ 。
+
将查询的字符串 `QUICK!` 传入标准分析器中，输出的结果是单个项 `quick` 。因为只有一个单词项，所以 `match` 查询执行的是单个底层 `term` 查询。

3. _查找匹配文档_ 。
+
用 `term` 查询在倒排索引中查找 `quick` 然后获取一组包含该项的文档，本例的结果是文档：1、2 和 3 。

4. _为每个文档评分_ 。
+
用 `term` 查询计算每个文档相关度评分 `_score` ，这是种将((("relevance scores", "calculating for single term match query results")))词频（term frequency，即词 `quick` 在相关文档的 `title` 字段中出现的频率）和反向文档频率（inverse document frequency，即词 `quick` 在所有文档的 `title` 字段中出现的频率），以及字段的长度（即字段越短相关度越高）相结合的计算方式。参见 <<relevance-intro, 相关性的介绍>> 。

这个过程给我们以下（经缩减）结果：

[source,js]
--------------------------------------------------
"hits": [
 {
    "_id":      "1",
    "_score":   0.5, <1>
    "_source": {
       "title": "The quick brown fox"
    }
 },
 {
    "_id":      "3",
    "_score":   0.44194174, <2>
    "_source": {
       "title": "The quick brown fox jumps over the quick dog"
    }
 },
 {
    "_id":      "2",
    "_score":   0.3125, <2>
    "_source": {
       "title": "The quick brown fox jumps over the lazy dog"
    }
 }
]
--------------------------------------------------
<1> 文档 1 最相关，因为它的 `title` 字段更短，即 `quick` 占据内容的一大部分。
<2> 文档 3 比 文档 2 更具相关性，因为在文档 3 中 `quick` 出现了两次。
