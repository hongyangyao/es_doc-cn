[[distrib-multi-doc]]
=== 多文档模式

`mget` 和 `bulk` API 的((("mget (multi-get) API", "retrieving multiple documents, process of")))((("documents", "retrieving multiple with mget")))模式类似于单文档模式。区别在于协调节点知道每个文档存在于哪个分片中。
它将整个多文档请求分解成 _每个分片_ 的多文档请求，并且将这些请求并行转发到每个参与节点。

协调节点一旦收到来自每个节点的应答，就将每个节点的响应收集整理成单个响应，返回给客户端，如 <<img-distrib-mget>> 所示。

[[img-distrib-mget]]
.使用 `mget` 取回多个文档
image::images/elas_0405.png[“使用 `mget` 取回多个文档”]

以下是使用单个 `mget` 请求取回多个文档所需的步骤顺序：

1. 客户端向 `Node 1` 发送 `mget` 请求。

2. `Node 1` 为每个分片构建多文档获取请求，然后并行转发这些请求到托管在每个所需的主分片或者副本分片的节点上。一旦收到所有答复， `Node 1` 构建响应并将其返回给客户端。

可以对 `docs` 数组中每个文档设置 `routing` ((("routing parameter")))参数。

bulk API， 如 <<img-distrib-bulk>> 所示， 允许在单个批量请求中执行多个创建、索引、删除和更新请求。

[[img-distrib-bulk]]
.使用 `bulk` 修改多个文档
image::images/elas_0406.png[“使用 `bulk` 修改多个文档”]

`bulk` API((("bulk API", "multiple document changes with")))((("documents", "multiple changes with bulk"))) 按如下步骤顺序执行：

1. 客户端向 `Node 1` 发送 `bulk` 请求。

2. `Node 1` 为每个节点创建一个批量请求，并将这些请求并行转发到每个包含主分片的节点主机。

3. 主分片一个接一个按顺序执行每个操作。当每个操作成功时，主分片并行转发新文档（或删除）到副本分片，然后执行下一个操作。
      一旦所有的副本分片报告所有操作成功，该节点将向协调节点报告成功，协调节点将这些响应收集整理并返回给客户端。

`bulk` API 还可以在整个批量请求的最顶层使用 `consistency` 参数，以及在每个请求中的元数据中使用 `routing` 参数。
