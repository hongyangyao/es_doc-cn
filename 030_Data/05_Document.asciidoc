[[document]]
=== 什么是文档?

在大多数应用中，多数实体或对象可以被序列化为包含键值对的 JSON 对象。
((("objects")))((("JSON", "objects")))((("keys and values")))
一个 _键_ 可以是一个字段或字段的名称，一个 _值_ 可以((("values")))是一个字符串，一个数字，一个布尔值，
另一个对象，一些数组值，或一些其它特殊类型诸如表示日期的字符串，或代表一个地理位置的对象：

[source,js]
--------------------------------------------------
{
    "name":         "John Smith",
    "age":          42,
    "confirmed":    true,
    "join_date":    "2014-06-01",
    "home": {
        "lat":      51.5,
        "lon":      0.1
    },
    "accounts": [
        {
            "type": "facebook",
            "id":   "johnsmith"
        },
        {
            "type": "twitter",
            "id":   "johnsmith"
        }
    ]
}
--------------------------------------------------


通常情况下，我们使用的术语 _对象_ 和 _文档_ 是可以互相替换的。不过，有一个区别：((("objects", "documents versus")))((("documents", "objects versus")))
一个对象仅仅是类似于 hash 、 hashmap 、字典或者关联数组的 JSON 对象，对象中也可以嵌套其他的对象。
对象可能包含了另外一些对象。在 Elasticsearch 中，术语 _文档_ 有着特定的含义。它是指最顶层或者根对象((("root object"))),
这个根对象被序列化成 JSON 并存储到 Elasticsearch 中，指定了唯一 ID。


WARNING: 字段的名字可以是任何合法的字符串，但 _不可以_ 包含英文句号(.)。

[[_Document_Metadata]]
=== 文档元数据

一个文档不仅仅包含它的数据((("documents", "metadata"))) ，也包含 _元数据_ &#x2014;&#x2014; _有关_ 文档的信息。
((("metadata, document")))三个必须的元数据元素如下：


 `_index`::
   文档在哪存放

 `_type`::
   文档表示的对象类别

 `_id`::
   文档唯一标识


==== _index

一个 _索引_ 应该是因共同的特性被分组到一起的文档集合。
例如，你可能存储所有的产品在索引 `products` 中，而存储所有销售的交易到索引 `sales` 中。
虽然也允许存储不相关的数据到一个索引中，但这通常看作是一个反模式的做法。


[TIP]
====
实际上，在 Elasticsearch 中，我们的数据是被存储和索引在 _分片_ 中，而一个索引仅仅是逻辑上的命名空间，
这个命名空间由一个或者多个分片组合在一起。((("shards", "grouped in indices")))
然而，这是一个内部细节，我们的应用程序根本不应该关心分片，对于应用程序而言，只需知道文档位于一个 _索引_ 内。
Elasticsearch 会处理所有的细节。
====

我们将在 <<index-management>> 介绍如何自行创建和管理索引，但现在我们将让 Elasticsearch 帮我们创建索引。
所有需要我们做的就是选择一个索引名，这个名字必须小写，不能以下划线开头，不能包含逗号。我们用 `website` 作为索引名举例。


==== _type

数据可能在索引中只是松散的组合在一起，但是通常明确定义一些数据中的子分区是很有用的。
例如，所有的产品都放在一个索引中，但是你有许多不同的产品类别，比如 "electronics" 、 "kitchen" 和 "lawn-care"。


这些文档共享一种相同的（或非常相似）的模式：他们有一个标题、描述、产品代码和价格。他们只是正好属于“产品”下的一些子类。


Elasticsearch 公开了一个称为 _types_ （类型）的特性，它允许您在索引中对数据进行逻辑分区。不同 types 的文档可能有不同的字段，但最好能够非常相似。
我们将在 <<mapping>> 中更多的讨论关于 types 的一些应用和限制。


一个  `_type` 命名可以是大写或者小写，但是不能以下划线或者句号开头，不应该包含逗号，((("types", "names of")))
并且长度限制为256个字符. 我们使用 `blog` 作为类型名举例。


==== _id

_ID_ 是一个字符串，((("id", "&#x5f;id, in document metadata")))当它和 `_index` 以及 `_type` 组合就可以唯一确定 Elasticsearch 中的一个文档。
当你创建一个新的文档，要么提供自己的 `_id` ，要么让 Elasticsearch 帮你生成。

[[_Other_Metadata]]
==== 其他元数据

还有一些其他的元数据元素，他们在 <<mapping>> 进行了介绍。通过前面已经列出的元数据元素，
我们已经能存储文档到 Elasticsearch 中并通过 ID 检索它--换句话说，使用 Elasticsearch 作为文档的存储介质。
