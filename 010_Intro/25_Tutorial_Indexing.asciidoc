[[_finding_your_feet]]
=== 适应新环境

为了让大家对 Elasticsearch 能实现什么及其上手难易程度有一个基本印象，让我们从一个简单的教程开始并介绍索引、搜索及聚合等基础概念。

我们将一并介绍一些新的技术术语，即使无法立即全部理解它们也无妨，因为在本书后续内容中，我们将继续深入介绍这里提到的所有概念。

接下来尽情享受 Elasticsearch 探索之旅。

==== 创建一个雇员目录

我们受雇于 ((("employee directory, building (example)"))) _Megacorp_ 公司，作为 HR 部门新的 _“热爱无人机”_ （_"We love our
drones!"_）激励项目的一部分，我们的任务是为此创建一个员工目录。该目录应当能培养员工认同感及支持实时、高效、动态协作，因此有一些业务需求：

* 支持包含多值标签、数值、以及全文本的数据
* 检索任一员工的完整信息
* 允许结构化搜索，比如查询 30 岁以上的员工
* 允许简单的全文搜索以及较复杂的短语搜索
* 支持在匹配文档内容中高亮显示搜索片段
* 支持基于数据创建和管理分析仪表盘

[[_indexing_employee_documents]]
=== 索引员工文档

第一个业务需求是存储员工数据。((("documents", "indexing")))((("indexing"))) 这将会以 _员工文档_ 的形式存储：一个文档代表一个员工。存储数据到 Elasticsearch 的行为叫做 _索引_ ，但在索引一个文档之前，需要确定将文档存储在哪里。

一个 Elasticsearch 集群可以((("clusters", "indices in")))(((in clusters"))) 包含多个 _索引_ ，相应的每个索引可以包含多个 _类型_ 。((("tables"))) 这些不同的类型存储着多个 _文档_ ，每个文档又有 ((("fields"))) 多个 _属性_ 。

.Index Versus Index Versus Index
**************************************************

你也许已经注意到 _索引_ 这个词在 Elasticsearch 语境中有多种含义， ((("index, meanings in Elasticsearch"))) 这里有必要做一些说明：

索引（名词）：

如前所述，一个 _索引_ 类似于传统关系数据库中的一个 _数据库_ ，是一个存储关系型文档的地方。 _索引_ (_index_) 的复数词为 _indices_ 或 _indexes_ 。

索引（动词）：

_索引一个文档_ 就是存储一个文档到一个 _索引_ （名词）中以便被检索和查询。这非常类似于 SQL 语句中的 `INSERT` 关键词，除了文档已存在时，新文档会替换旧文档情况之外。

倒排索引：

关系型数据库通过增加一个 _索引_ 比如一个 B树（B-tree）索引 ((("relational databases", "indices"))) 到指定的列上，以便提升数据检索速度。Elasticsearch 和 Lucene 使用了一个叫做 ((("inverted index"))) _倒排索引_ 的结构来达到相同的目的。
+
默认的，一个文档中的每一个属性都是 _被索引_ 的（有一个倒排索引）和可搜索的。一个没有倒排索引的属性是不能被搜索到的。我们将在 <<inverted-index>> 讨论倒排索引的更多细节。

**************************************************

对于员工目录，我们将做如下操作：

* 每个员工索引一个文档，文档包含该员工的所有信息。
* 每个文档都将是((("types", "in employee directory (example)"))) `employee` _类型_ 。
* 该类型位于 _索引_ `megacorp` 内。
* 该索引保存在我们的 Elasticsearch 集群中。

实践中这非常简单（尽管看起来有很多步骤），我们可以通过一条命令完成所有这些动作：

[source,js]
--------------------------------------------------
PUT /megacorp/employee/1
{
    "first_name" : "John",
    "last_name" :  "Smith",
    "age" :        25,
    "about" :      "I love to go rock climbing",
    "interests": [ "sports", "music" ]
}
--------------------------------------------------
// SENSE: 010_Intro/25_Index.json

注意，路径 `/megacorp/employee/1` 包含了三部分的信息：

+megacorp+::
      索引名称

+employee+::
      类型名称

+1+::
      特定雇员的ID

请求体 —— JSON 文档 —— 包含了这位员工的所有详细信息，他的名字叫 John Smith ，今年 25 岁，喜欢攀岩。

很简单！无需进行执行管理任务，如创建一个索引或指定每个属性的数据类型之类的，可以直接只索引一个文档。Elasticsearch 默认地完成其他一切，因此所有必需的管理任务都在后台使用默认设置完成。

进行下一步前，让我们增加更多的员工信息到目录中：

[source,js]
--------------------------------------------------
PUT /megacorp/employee/2
{
    "first_name" :  "Jane",
    "last_name" :   "Smith",
    "age" :         32,
    "about" :       "I like to collect rock albums",
    "interests":  [ "music" ]
}

PUT /megacorp/employee/3
{
    "first_name" :  "Douglas",
    "last_name" :   "Fir",
    "age" :         35,
    "about":        "I like to build cabinets",
    "interests":  [ "forestry" ]
}
--------------------------------------------------
// SENSE: 010_Intro/25_Index.json
